"use strict"

/*
 * *****对象
 *
 * ***基本概念
 *
 * 对象属于一种复合的数据类型，在对象中可以保存多个不同的数据类型。
 * 对象中的内容是一组名/值对，其值被称为属性，对象是一组属性的无序集合
 * 对象的属性是一个函数，则称为方法
 *
 * ***分类
 *
 * 内建对象
 *      由 ES 标准定义的对象，在任何 ES 实现中都可以使用
 *      比如：Math、String、Number
 * 宿主对象
 *      由 JS 的运行环境提供的对象，目前主要指由浏览器提供的对象
 *      比如：DOM、BOM
 * 自定义对象
 *      开发人员自己创建的对象
 *
 * ***创建方式
 *
 * new 关键字
 *      var obj = new Object()、new Person() ...
 *      不推荐
 * 对象字面量
 *      var obj = {name1: value1, name2: value2}
 *      属性名可以加引号，可以不加，如果要用一些特殊的字符或者属性名包括空格，需加引号
 *      最末尾不要逗号（，）
 *
 * ***对象属性
 *      属性通常可以被修改、添加和删除，但是某些属性是只读的
 * *访问对象属性
 *  objectName.property
 *  objectName["property"]
 *      相比于上一种方式更灵活，因为用引号包起来之后可以用更多奇奇怪怪的属性名
 *  objectName[expression]
 *      expression 为变量，例如 var x = "age"; person[x];
 *      同上
 * *添加新属性
 *      通过赋值语句即可添加
 *      objectName.newProperty = "value";
 * *删除对象属性
 *      delete 关键字删除对象属性
 *      delete objectName.certainProperty;
 * *判断是否存在某属性
 *      in 关键字
 *      "propertyName" in objectName
 *
 * ***基本数据类型与引用数据类型
 *      基本变量    栈内存
 *      对象        堆内存
 *
 * 两个对象变量之间比较，比较的是对象的内存地址，对象无法比较
 * 将对象变量赋值为 null，即变量存储的地址变为空，不会修改堆中对象数据
 *
 * ***for ... in 循环
 *      可以用 for ... in 语句来遍历对象的属性
 *
 */

var Person = {name: "Tom", sex: "male"};

console.log(Person.name + " " + Person["sex"] + " ");

Person.age = "20";

console.log("age" in Person);
console.log("ad" in Person);

delete Person.age;

console.log("age" in Person);
console.log("ad" in Person);

for (var x in Person) {
    console.log(x + ":" + Person[x]);
}

/*
 * *****函数
 *
 * ***基本概念
 *
 * 函数是一类特殊的对象，功能用法可类比于 C 语言函数。
 * 函数可以封装一些语句，在需要是调用执行。
 * 用 typeof 关键字检查类型，返回 "function"
 *
 * ***创建方式
 *
 * *new 关键字
 *      var fun = new Function();
 *      不推荐
 * *函数声名
 *      function 函数名 ([形参1，形参2，...，形参n]){ 语句... }
 * *函数表达式
 *      var 函数表达式 = function ([形参1，形参2，...，形参n]){ 语句... }
 *
 *      function ([形参1，形参2，...，形参n]){ 语句... } 叫做匿名函数，一般不会单独使用
 *
 * ***函数参数
 * *形参
 *      函数声名时声名的参数叫做形参，声名形参就相当于在函数内部声名了对应的变量，但是没赋值，默认值为 undefined
 * *实参
 *      在调用函数时，可以传入实参，实参会赋值给函数中对应的形参
 *
 *      函数定义时不需要为形参（parameter）规定数据类型
 *      函数不会对所传递的实参（argument）实行类型检查。
 *          实参可以是任何类型的值，String、Object、Function 等等都可
 *      函数不会检查所接收实参（argument）的数量。
 *          如果实参数超过形参数，多余实参不会赋值给形参。所有传入实参可以通过函数内置的 arguments 对象获取。
 *          如果实参数少于形参数，剩余形参不会被赋值，默认为 undefined
 *
 * ***函数返回值
 *      用 return 语句返回函数执行结果，默认返回 undefined
 *      调用函数的结果就是函数返回值
 *      函数返回值可以是任何类型的值
 *
 * ***函数调用
 *   函数被定义时，其内部代码不会执行；函数被调用时，其内部代码会被执行。
 *   以函数形式调用，函数名();
 *       例如，fun();
 *   以方法形式调用，对象名. 方法名();
 *       例如，obj.fun();
 *
 * ***立即执行函数
 * 语法
 *      {语句}(传入参数);
 * 例子
 *
 */

function max(a, b) {
    return (a > b) ? a : b;
}

console.log(max(12, 34));

// {
//     console.log(a + b);
// }(123, 456);

/*
 * *****创建变量推荐做法
 *  JavaScript 提供原始数据类型字符串、数字和布尔的对象版本
 *  但不推荐使用
 *
 * 请使用对象字面量 {} 代替 new Object()
 * 请使用字符串字面量 "" 代替 new String()
 * 请使用数值字面量代替 Number()
 * 请使用布尔字面量代替 new Boolean()
 * 请使用数组字面量 [] 代替 new Array()
 * 请使用模式字面量代替 new RexExp()
 * 请使用函数表达式 () {} 代替 new Function()
 *
 */

/*
 * *****作用域
 *    一个变量的作用范围
 *
 * ***全局作用域
 *      函数之外声名的变量，会成为全局变量
 *      作用域是全局的，网页上所有脚本或函数都能访问
 *      在页面打开时创建，页面关闭时销毁
 *      在 HTML 中，全局作用域是 window 对象，代表浏览器窗口，所有全局变量均作为 window 的属性保存
 *
 * ***函数作用域
 *      函数中声名的变量，会成为函数的局部变量
 *      作用域是局部的，只能在函数内访问
 *      函数作用域在调用函数时创建，在函数执行完毕后销毁
 *      在函数作用域中可以访问到全局变量
 *      函数作用域中使用变量，先在函数作用域找，再到全局作用域找
 *
 */

console.log(window.max(12, 45));

/*
 * *****变量提升
 *
 * JS 将变量或函数的声名移到作用域（全局作用域或函数作用域）顶部的默认行为
 * ES6 推荐 let 和 const 关键字来声名变量，用 let 或 const 声明的变量和常量不会被提升。这两种声名方式不允许声名前使用变量，不然会报错
 */

/*
 * *****调试
 *
 * 可以在浏览器开发者工具中对 JS 代码进行调试运行
 *
 */

